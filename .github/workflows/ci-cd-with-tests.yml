name: Complete CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.set_test_output.outputs.tests_passed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      - name: Make test script executable
        run: chmod +x run_tests.sh

      - name: Build project with tests and coverage
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            mkdir -p /repo/build && \
            cd /repo/build && \
            cmake .. -DCODE_COVERAGE=ON && \
            make
            "

      - name: Run tests
        id: run_tests
        continue-on-error: true
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            cd /repo/build/bin && \
            mkdir -p reports && \
            # Run each test with XML output
            for test in *_test; do
              if [ -x \"\$test\" ]; then
                echo \"Running \$test...\"
                mkdir -p \"reports/\$test\"
                ./\$test --gtest_output=xml:\"reports/\$test/results.xml\" || echo \"Test \$test failed with exit code \$?\"
              fi
            done
            "
          # We don't exit with failure here - we'll analyze test results separately

      - name: Set tests passed output
        id: set_test_output
        run: |
          # Check if any XML files contain failures
          FAILURE_COUNT=$(grep -r "<failure" --include="*.xml" build/bin/reports | wc -l)
          if [ "$FAILURE_COUNT" -gt 0 ]; then
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            echo "Tests failed: $FAILURE_COUNT failures found"
          else
            echo "tests_passed=true" >> $GITHUB_OUTPUT
            echo "All tests passed"
          fi

      - name: Generate coverage report
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            cd /repo/build && \
            make coverage || true
            "

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage/html
        if: always()

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/bin/reports
        if: always()

      - name: Publish test report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: 'build/bin/reports/**/results.xml'
          fail_on_failure: false

      - name: Generate coverage badges
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./build/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/bin

  deploy:
    runs-on: [seame]
    needs: build_and_test
    if: needs.build_and_test.outputs.tests_passed == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - name: Ensure target directory exists
        run: |
          mkdir -p ./team06/bin \
          && rm -rf ./bin/*

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./bin

      - name: Ship binary to Jetson
        run: |
          sshpass -p "${{ secrets.JETSON_PASSWORD }}" \
          scp -r ./bin \
          team06@10.21.221.56:/home/team06/

      - name: Give binaries permission to execute
        run: |
          sshpass -p "${{ secrets.JETSON_PASSWORD }}" \
          ssh team06@10.21.221.56 'chmod +x /home/team06/bin/*'

  notify:
    runs-on: ubuntu-latest
    needs: [build_and_test, deploy]
    if: always()
    steps:
      - name: Pipeline Status
        run: |
          if [[ "${{ needs.build_and_test.result }}" == "success" && "${{ needs.deploy.result }}" == "success" ]]; then
            echo "Pipeline completed successfully! ✅"
          elif [[ "${{ needs.build_and_test.result }}" == "success" && "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "Build and tests passed, but deployment was skipped (tests may have failed or not on main/dev branch) ⚠️"
          elif [[ "${{ needs.build_and_test.result }}" == "success" && "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "Build and tests passed, but deployment failed ❌"
          else
            echo "Build or tests failed ❌"
          fi
