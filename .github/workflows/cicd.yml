# GitHub hosted runner with QEMU + Docker Buildx
# Runs Docker custom ARM64 image to compile repo and uploads binary
# Deploys to Jetson Nano via a self-hosted runner.

name: CI/CD

on:
  pull_request:
    branches:
      - main
# for testing
  push:
    branches:
        - main
        - dev
        - zm/cicd

env:
  JETSON_HOST: team06@10.21.221.56
  JETSON_TARGET_DIR: /home/team06
  APP_VERSION: 1.0.0-${{ github.run_number }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      - name: Run tests
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo \
            -e CI=true \
            jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            chmod +x /repo/run_tests.sh && \
            ./run_tests.sh || exit 1
            "

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      - name: Build project and create version file
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            chmod +x /repo/build.sh && \
            export APP_VERSION='${{ env.APP_VERSION }}' && \
            ./build.sh && \
            # Create version file inside the Docker container
            mkdir -p build/bin && \
            echo '${{ env.APP_VERSION }}' > build/bin/version.txt && \
            # Fix permissions for the GitHub runner
            chmod -R 777 build
            "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ env.APP_VERSION }}
          path: build/bin
          retention-days: 7

  deploy:
    runs-on: [seame]
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: production
    steps:
      - name: Ensure target directory exists
        run: |
          mkdir -p ./team06/bin \
          && rm -rf ./bin/*

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ env.APP_VERSION }}
          path: ./bin

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.JETSON_SSH_KEY }}

      - name: Add host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.JETSON_HOST }} >> ~/.ssh/known_hosts

      - name: Ship binary to Jetson
        run: |
          scp -r ./bin ${{ env.JETSON_HOST }}:${{ env.JETSON_TARGET_DIR }}/
        continue-on-error: false

      - name: Give binaries permission to execute
        run: |
          ssh ${{ env.JETSON_HOST }} 'chmod +x ${{ env.JETSON_TARGET_DIR }}/bin/*'

      - name: Create deployment record
        run: |
          ssh ${{ env.JETSON_HOST }} "echo 'Deployed version ${{ env.APP_VERSION }} on $(date)' >> ${{ env.JETSON_TARGET_DIR }}/deployment-history.log"

      - name: Verify deployment
        run: |
          ssh ${{ env.JETSON_HOST }} 'test -f ${{ env.JETSON_TARGET_DIR }}/bin/version.txt'

      - name: Notify deployment status
        if: ${{ success() }}
        run: echo "::notice::Successfully deployed version ${{ env.APP_VERSION }} to Jetson Nano"
