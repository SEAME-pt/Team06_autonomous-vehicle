# CI/CD Pipeline for Jetson Nano Project
#
# This workflow handles the complete CI/CD pipeline for the Jetson Nano project:
# 1. Testing: Runs all unit tests in a Docker container
# 2. Building: Compiles the project and creates versioned artifacts
# 3. Deployment: Deploys the built artifacts to the Jetson Nano device
#
# The workflow uses Docker with QEMU for ARM64 cross-compilation and
# includes caching optimizations for faster builds.

name: CI/CD

on:
  # Trigger on pull requests to main branch
  pull_request:
    branches:
      - main
  # Trigger on pushes to specified branches
  push:
    branches:
      - main
      - dev
      - zm/cicd

# Environment variables used throughout the workflow
env:
  # Version format: 1.0.0-{run_number}
  APP_VERSION: 1.0.0-${{ github.run_number }}
  # Enable Docker BuildKit for better caching and build performance
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Test job: Runs all unit tests in a Docker container
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up QEMU for ARM64 emulation
      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create and configure cache directory
      - name: Create cache directory
        run: |
          mkdir -p ${{ github.workspace }}/.buildx-cache
          chmod 777 ${{ github.workspace }}/.buildx-cache

      # Cache Docker layers for faster builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.buildx-cache
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.workflow }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.workflow }}-
            ${{ runner.os }}-buildx-

      # Pull the base Docker image for Jetson Nano
      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      # Run all tests in the Docker container
      - name: Run tests
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -v ${{ github.workspace }}/.buildx-cache:/repo/.buildx-cache \
            -w /repo \
            -e CI=true \
            jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            mkdir -p /repo/.buildx-cache && \
            chmod 777 /repo/.buildx-cache && \
            chmod +x /repo/run_tests.sh && \
            ./run_tests.sh || exit 1
            "

  # Build job: Compiles the project and creates artifacts
  build:
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create cache directory
        run: |
          mkdir -p ${{ github.workspace }}/.buildx-cache
          chmod 777 ${{ github.workspace }}/.buildx-cache

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.buildx-cache
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.workflow }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.workflow }}-
            ${{ runner.os }}-buildx-

      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      # Build the project and create version file
      - name: Build project and create version file
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -v ${{ github.workspace }}/.buildx-cache:/repo/.buildx-cache \
            -w /repo \
            jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            mkdir -p /repo/.buildx-cache && \
            chmod 777 /repo/.buildx-cache && \
            chmod +x /repo/build.sh && \
            export APP_VERSION='${{ env.APP_VERSION }}' && \
            ./build.sh && \
            mkdir -p build/bin && \
            echo '${{ env.APP_VERSION }}' > build/bin/version.txt && \
            chmod -R 777 build
            "

      # Upload build artifacts for deployment
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ env.APP_VERSION }}
          path: build/bin
          retention-days: 7

  # Deploy job: Deploys the built artifacts to the Jetson Nano
  deploy:
    runs-on: [seame]  # Custom runner for deployment
    needs: build  # Only run if build succeeds
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'  # Only deploy on main or dev branches
    environment: production
    steps:
      # Prepare deployment directory
      - name: Ensure target directory exists
        run: |
          mkdir -p ./team06/bin \
          && rm -rf ./bin/*

      # Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ env.APP_VERSION }}
          path: ./bin

      # Set up SSH for deployment
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.JETSON_SSH_KEY }}

      # Add Jetson Nano to known hosts
      - name: Add host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.JETSON_HOST }} >> ~/.ssh/known_hosts

      # Deploy the binaries to Jetson Nano
      - name: Ship binary to Jetson
        run: |
          scp -r ./bin ${{ env.JETSON_HOST }}:${{ env.JETSON_TARGET_DIR }}/
        continue-on-error: false

      # Set executable permissions on deployed files
      - name: Give binaries permission to execute
        run: |
          ssh ${{ env.JETSON_HOST }} 'chmod +x ${{ env.JETSON_TARGET_DIR }}/bin/*'

      # Record deployment in history log
      - name: Create deployment record
        run: |
          ssh ${{ env.JETSON_HOST }} "echo 'Deployed version ${{ env.APP_VERSION }} on $(date)' >> ${{ env.JETSON_TARGET_DIR }}/deployment-history.log"

      # Verify successful deployment
      - name: Verify deployment
        run: |
          ssh ${{ env.JETSON_HOST }} 'test -f ${{ env.JETSON_TARGET_DIR }}/bin/version.txt'

      # Notify on successful deployment
      - name: Notify deployment status
        if: ${{ success() }}
        run: echo "::notice::Successfully deployed version ${{ env.APP_VERSION }} to Jetson Nano"
