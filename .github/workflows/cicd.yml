# CI/CD Pipeline for Jetson Nano Project
#
# This workflow handles the complete CI/CD pipeline for the Jetson Nano project:
# 1. Testing: Runs all unit tests in a Docker container
# 2. Building: Compiles the project and creates versioned artifacts
# 3. Deployment: Deploys the built artifacts to the Jetson Nano device

name: CI/CD

# Add environment variables at workflow level
env:
  APP_VERSION: 1.0.${{ github.run_number }}

on:
  # Trigger on pull requests to main branch
  pull_request:
    branches:
      - main
  # Trigger on pushes to specified branches
  push:
    branches:
      - main
      - dev
      - zm/cmake

jobs:
  # Test job: Runs all unit tests in a Docker container
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up QEMU for ARM64 emulation
      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Pull the base Docker image for Jetson Nano
      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      # Run all tests in the Docker container
      - name: Run tests
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo \
            -e CI=true \
            jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            echo 'Debug: Listing /repo directory structure' && \
            ls -la /repo && \
            echo 'Debug: Configuring git safe directories' && \
            git config --global --add safe.directory /repo && \
            git config --global --add safe.directory /repo/modules/cluster-display && \
            git config --global --add safe.directory /repo/modules/lane-detection && \
            git config --global --add safe.directory /repo/modules/object-detection && \
            echo 'Debug: Initializing git submodules' && \
            git submodule update --init --recursive && \
            echo 'Debug: Listing /repo/modules directory' && \
            ls -la /repo/modules && \
            echo 'Debug: Listing /repo/modules/cluster-display directory' && \
            ls -la /repo/modules/cluster-display && \
            echo 'Debug: Current working directory' && \
            pwd && \
            chmod +x /repo/scripts/run_tests.sh && \
            ./scripts/run_tests.sh || exit 1
            "

  # Build job: Compiles the project and creates artifacts
  build:
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull Jetson Nano Ubuntu Docker image
        run: docker pull jmoreiraseame/jetson-nano-ubuntu:bionic

      # Build the project and create version file
      - name: Build project and create version file
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/repo \
            -w /repo \
            jmoreiraseame/jetson-nano-ubuntu:bionic \
            /bin/bash -c "
            echo 'Debug: Listing /repo directory structure' && \
            ls -la /repo && \
            echo 'Debug: Configuring git safe directories' && \
            git config --global --add safe.directory /repo && \
            git config --global --add safe.directory /repo/modules/cluster-display && \
            git config --global --add safe.directory /repo/modules/lane-detection && \
            git config --global --add safe.directory /repo/modules/object-detection && \
            echo 'Debug: Initializing git submodules' && \
            git submodule update --init --recursive && \
            echo 'Debug: Listing /repo/modules directory' && \
            ls -la /repo/modules && \
            echo 'Debug: Listing /repo/modules/cluster-display directory' && \
            ls -la /repo/modules/cluster-display && \
            chmod +x /repo/scripts/build.sh && \
            export APP_VERSION='${{ env.APP_VERSION }}' && \
            export CMAKE_FLAGS='-DBUILD_TESTS=OFF' && \
            ./scripts/build.sh && \
            mkdir -p build/bin && \
            echo '${{ env.APP_VERSION }}' > build/bin/version.txt && \
            # Only copy production binaries
            cd build/bin && \
            rm -f *_test && \
            rm -rf reports coverage && \
            cd ../.. && \
            chmod -R 777 build
            "

      # Upload build artifacts for deployment
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ env.APP_VERSION }}
          path: build/bin
          retention-days: 7

  # Deploy job: Deploys the built artifacts to the Jetson Nano
  deploy:
    runs-on: [seame]  # Custom runner for deployment
    needs: build  # Only run if build succeeds
    steps:
      # Prepare deployment directory
      - name: Ensure target directory exists
        run: |
          mkdir -p ./team06/bin \
          && rm -rf ./bin/*

      # Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ env.APP_VERSION }}
          path: ./bin

      # Deploy the binaries to Jetson Nano
      - name: Ship binary to Jetson
        run: |
          sshpass -p "${{ secrets.JETSON_PASSWORD }}" \
          scp -r ./bin \
          team06@10.21.221.56:/home/team06/

      # Set executable permissions on deployed files
      - name: Give binaries permission to execute
        run: |
          sshpass -p "${{ secrets.JETSON_PASSWORD }}" \
          ssh team06@10.21.221.56 'chmod +x /home/team06/bin/*'

      # Record deployment in history log
      - name: Create deployment record
        run: |
          sshpass -p "${{ secrets.JETSON_PASSWORD }}" \
          ssh team06@10.21.221.56 "echo 'Deployed version ${{ github.run_number }} on $(date)' >> /home/team06/deployment-history.log"

      # Verify successful deployment
      - name: Verify deployment
        run: |
          sshpass -p "${{ secrets.JETSON_PASSWORD }}" \
          ssh team06@10.21.221.56 'test -f /home/team06/bin/version.txt'

      # Notify on successful deployment
      - name: Notify deployment status
        if: ${{ success() }}
        run: echo "::notice::Successfully deployed version ${{ env.APP_VERSION }} to Jetson Nano"
